syntax = "proto3";

package beget.domainRegistrar.v1.order;

import "google/api/annotations.proto";
import "domain-registrar/proto/v1/structures.proto";

service OrderService {
    rpc register (RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/v1/domainRegistrar/register"
            body: "*"
        };
    }

    rpc renew (RenewRequest) returns (RenewResponse) {
        option (google.api.http) = {
            post: "/v1/domainRegistrar/renew"
            body: "*"
        };
    }
}

message RenewRequest {
    // Полное доменное имя для продления
    string fqdn = 1;

    // Период продления в годах
    uint32 period = 2;

    // Тип оплаты
    beget.domainRegistrar.v1.structures.PayType pay_type = 3;

}

message RenewResponse {
    oneof response {
        beget.domainRegistrar.v1.structures.RenewOrder renew_order = 1;

        Error error = 2;
    }

    message Error {
        string message = 1;
        ErrorCode code = 2;
    }

    enum ErrorCode {
        _ = 0;
        EXPIRED_DATE_NOT_MATCH = 1;
        ORDER_EXISTS = 2;
        INVALID_PERIOD = 3;
        INSUFFICIENT_FUNDS = 4;
        INVALID_PAY_TYPE = 5;
    }

}

message RegisterRequest {
    // Полное доменное имя для регистрации
    string fqdn = 1;

    // Являются ли данные администратора приватными
    bool private_person = 2;

    // Период в годах
    uint32 period = 3;

    // Dns записи
    repeated NsServer ns_server = 4;

    // Дополнительные опции
    Options options = 5;

    // Cсылка на сущетсвующую персону,
    uint64 person_id = 6;

    //Тип оплаты
    beget.domainRegistrar.v1.structures.PayType pay_type = 7;

    // Сущность описывает ns записи при регистрации домена
    message NsServer {
        string server = 1;
        string ip = 2;
    }

    // Сущность описывает дополнительные опции при регистрации домена
    message Options {
        // Установить Let`s encrypt
        bool ssl = 1;
        // Автопродление
        bool auto_renew = 2;
        // ID сайта для привязки
        uint64 site_id = 3;
    }
}

message RegisterResponse {
    oneof result {
        beget.domainRegistrar.v1.structures.RegistrationOrder order = 1;
        Error error = 2;
    }

    message Error {
        string message = 1;
        ErrorCode code = 2;
    }

    enum ErrorCode {
        _ = 0;
        ALREADY_REGISTRED = 1;
        INVALID_PERIOD = 2;
        INVALID_PERSON = 3;
        INVALID_DOMAIN = 4;
        INVALID_SITE = 5;
        INSUFFICIENT_FUNDS = 6;
    }
}
