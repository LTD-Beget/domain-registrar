syntax = "proto3";

package beget.domainRegistrar.v1.registration;

import "google/api/annotations.proto";
import "domain-registrar/proto/v1/structures.proto";

service RegistrationService {
    rpc register (RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/v1/domainRegistrar/register"
            body: "*"
        };
    }
    rpc countDomain (CountDomainRequest) returns (CountDomainResponse) {
        option (google.api.http) = {
            post: "/v1/domainRegistrar/register/score"
            body: "*"
        };
    }
    rpc resendVerification (ResendVerificationRequest) returns (ResendVerificationResponse) {
        option (google.api.http) = {
            post: "/v1/domainRegistrar/domain/verification"
            body: "*"
        };
    }
}

message RegisterRequest {
    // Полное доменное имя для регистрации
    string fqdn = 1;

    // Являются ли данные администратора приватными
    bool private_person = 2;

    // Период в годах
    uint32 period = 3;

    // Dns записи
    repeated NsServer ns_server = 4;

    // Дополнительные опции
    Options options = 5;

    // Cсылка на ревизию персоны
    string person_id = 6;

    //Явное указание оплаты
    PayType pay_type = 7;

    //Сущность описывает оплату
    message PayType {
        //Типом оплаты
        beget.domainRegistrar.v1.structures.PayType value = 1;
    }

    // Сущность описывает ns записи при регистрации домена
    message NsServer {
        string server = 1;
        string ip = 2;
    }

    // Сущность описывает дополнительные опции при регистрации домена
    message Options {
        // Установить Let`s encrypt
        bool ssl = 1;
        // Автопродление
        bool auto_renew = 2;
        // Условия линковки сайта к созданному домену
        Site site = 3;
        // Дополнительные параметры
        repeated Parameters parameters = 4;

        message Parameters {
            string key   = 1;
            string value = 2;
        }
    }

    message Site {
        oneof condition {
            // ID сайта для привязки
            uint64 site_id = 1;
            // Создать новый сайт для домена
            bool new = 2;
        }
    }
}

message RegisterResponse {
    oneof result {
        beget.domainRegistrar.v1.structures.RegistrationOrder order = 1;
        Error error = 2;
    }

    message Error {
        string message = 1;
        ErrorCode code = 2;
    }

    enum ErrorCode {
        _ = 0;
        ALREADY_REGISTERED = 1;
        INVALID_PERIOD = 2;
        INVALID_PERSON = 3;
        INVALID_DOMAIN = 4;
        INVALID_SITE = 5;
        INSUFFICIENT_FUNDS = 6;
        INVALID_NS = 7;
        ORDER_EXISTS = 8;
        STOPLIST_DOMAIN = 9;
        ANOTHER_DOMAIN_OWNER = 10;
        PREMIUM_DOMAIN = 11;
        RESERVED_DOMAIN = 12;
        DOMAIN_CREATION = 13;
        SITE_OUT_OF_LIMIT = 14;
        MIN_NS_COUNT = 15;
        MAX_NS_COUNT = 16;
    }
}

message CountDomainRequest {
    repeated string zone_name = 1;
}

message CountDomainResponse {
    uint32 count = 1;
}

message ResendVerificationRequest {
    string fqdn = 1;
}

message ResendVerificationResponse {
    oneof result {
        beget.domainRegistrar.v1.structures.VerificationOrder order = 1;
        Error error = 2;
    }

    message Error {
        string message = 1;
        ErrorCode code = 2;
    }

    enum ErrorCode {
        _ = 0;
        ALREADY_SENDING = 1;
        ALREADY_VERIFIED = 2;
        OUT_OF_LIMIT = 3;
        VERIFICATION_NOT_REQUIRED = 4;
    }
}